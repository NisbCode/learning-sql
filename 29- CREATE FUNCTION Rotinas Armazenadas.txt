#O QUE É#

Uma Rotina Armazenada é um subprograma que pode ser criado para efetuar tarefas específicas nas tabelas do banco de dados, usando comandos da linguagem 
SQL e Lógica de Programação.


#FUNÇÕES E PROCEDIMENTOS#
 
São dois tipos de rotinas armazenadas, parte da especificação SQL. As Funções e Procedimentos são um pouco similares, porém possuem aplicações diferentes
São invocadas de formas diferentes também (CALL x declaração). Nesta lição vamos falar especificamente sobre Funções, e na próxima lição iremos abordar os 
Procedimentos Armazenados (Stored Procedures).


#FUNÇÕES#

Uma função é usada para gerar um valor que pode ser usado em uma expressão. Esse valor é geralmente baseado em um ou mais parâmetros fornecidos à função 
As funções são executadas geralmente como parte de uma expressão
O MySQL possui diversas funções internas q o desenvolvedor pode utilizar, e tb permite que criemos nossas próprias funções, e é isso q mostraremos cm fazer agr


	#SINTAXE#

	CREATE FUNCTION nome_função (parâmetros)
	RETURNS tipo_dados
	código_da_função;


#COMO INVOCAR UMA FUNÇÃO#

SELECT nome_função(parâmetros);


#EXEMPLO1#

Vamos criar uma função que recebe dois valores numéricos e retorna o resultado da multiplicação entre eles:

				1- Criando a função:

CREATE FUNCTION fn_teste (a DECIMAL(10,2), b INT)            --Esse() do decimal é pq ele pede a precisão de quantas casas ele deve ler
RETURNS INT
RETURN a * b;


				2- Invocando a função:

SELECT fn_teste(2.5, 4) AS Resultado;


#EXEMPLO2#

Usando o banco de dados de testes db_biblioteca. 
Vamos criar uma função q consulte um livro a partir de seu código e retorne o preço total de 6 unidades desse livro:

SELECT Nome_Livro, fn_teste(Preco_Livro, 6) AS ‘Preço de 6 unidades’
FROM tbl_Livro
WHERE ID_Livro = 2;


#EXEMPLO3#

Crie uma função q mostre a mensagem “O preço do livro XXX é R$ YYY” p os livros do banco de dados, consultados pelo seu ID 
(XXX é o nome do livro, e YYY o seu preço):

CREATE FUNCTION fn_verPreço (a SMALLINT)
RETURNS VARCHAR(60)
RETURN
(SELECT CONCAT('O preço do livro ', Nome_Livro, ' é ', Preco_Livro)
FROM tbl_livro
WHERE ID_livro = a);


#TESTANDO A FUNÇÃO COM O LIVRO DE CÓDIGO 9#

SELECT fn_verPreço(9);


#EXCLUINDO UMA FUNÇÃO#

Para excluir uma função usamos o comando DROP FUNCTION, de acordo com a sintaxe a seguir:

DROP FUNCTION nome_função;